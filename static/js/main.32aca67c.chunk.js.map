{"version":3,"sources":["types/FilteringOption.ts","utils/fetchClient.ts","api/todos.ts","components/TodoForm/TodoForm.tsx","components/Header/Header.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/Notifications/NotificationError.tsx","components/Filter/Filter.tsx","components/Footer/Footer.tsx","App.tsx","index.tsx"],"names":["FilteringOption","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","status","statusText","json","client","deleteTodo","todoId","updateTodo","values","TodoForm","setError","onAdd","tempTodo","useState","newTodoTitle","setNewTodoTitle","handleFormSubmit","event","a","preventDefault","trim","onSubmit","type","className","placeholder","value","onChange","target","disabled","Boolean","Header","toggleAllCompletedTodos","areAllCompleted","classNames","active","onClick","aria-label","TodoItem","todo","loadingTodoIds","onDelete","handleUpdateTodo","id","title","completed","isLoading","setIsLoading","isTitleEdited","setIsTitleEdited","newTitle","setNewTitle","inputReference","useRef","useEffect","includes","current","focus","handleToggleComplete","useCallback","htmlFor","checked","onBlur","onKeyUp","key","ref","onDoubleClick","TodoList","todos","map","NotificationError","error","handleCloseError","hidden","Filter","filter","setFilter","href","selected","all","Footer","activeTodos","completedTodos","handleClearCompletedTodos","length","USER_ID","App","setTodos","setTempTodo","setLoadingTodoIds","userId","catch","every","handleAddTodo","newTodo","addedTodo","curTodos","handleDeleteTodo","prevLoadingTodoIds","prevTodoIds","prevTodoId","deletedTodos","newTodoData","prevIds","updatedTodo","prevTodos","updatedTodos","visibleTodos","useMemo","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAAYA,E,2GAAAA,K,UAAAA,E,gBAAAA,E,uBAAAA,M,gBCCNC,EAAW,oCAGjB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,WAAWD,EAASF,MAOxB,SAASI,EACPC,GAGa,IAFbC,EAEY,uDAFY,MACxBC,EACY,uDADA,KAENC,EAAuB,CAAEF,UAW/B,OATIC,IAEFC,EAAQC,KAAOC,KAAKC,UAAUJ,GAC9BC,EAAQI,QAAU,CAChB,eAAgB,oCAKbb,EAAK,KACTc,MAAK,kBAAMC,MAAM,GAAD,OAAIhB,GAAJ,OAAeO,GAAOG,MACtCK,MAAK,SAAAE,GACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,cAAkCH,EAASI,aAGnD,OAAOJ,EAASK,UAIf,IAAMC,EACN,SAAIhB,GAAJ,OAAoBD,EAAWC,IADzBgB,EAEL,SAAIhB,EAAaE,GAAjB,OAA+BH,EAAWC,EAAK,OAAQE,IAFlDc,EAGJ,SAAIhB,EAAaE,GAAjB,OAA+BH,EAAWC,EAAK,QAASE,IAHpDc,EAIH,SAAChB,GAAD,OAAiBD,EAAQC,EAAK,WCrC3BiB,EAAa,SAACC,GACzB,OAAOF,EAAA,iBAAwBE,KAOpBC,EAAa,SACxBD,EACAE,GAEA,OAAOJ,EAAA,iBAA6BE,GAAUE,I,gBCVnCC,EAA4B,SAAC,GAInC,IAHLC,EAGI,EAHJA,SACAC,EAEI,EAFJA,MACAC,EACI,EADJA,SAEA,EAAwCC,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAgB,uCAAG,WAAOC,GAAP,SAAAC,EAAA,yDACvBD,EAAME,iBAEDL,EAAaM,OAHK,uBAIrBV,EAAS,wBAJY,0CASjBC,EAAMG,GATW,OAUvBC,EAAgB,IAVO,2CAAH,sDAatB,OACE,sBAAMM,SAAUL,EAAhB,SACE,uBACEM,KAAK,OACLC,UAAU,oBACVC,YAAY,yBACZC,MAAOX,EACPY,SAAU,SAACT,GAAD,OAAWF,EAAgBE,EAAMU,OAAOF,QAClDG,SAAUC,QAAQjB,QCtBbkB,EAA0B,SAAC,GAAD,IACrCpB,EADqC,EACrCA,SACAC,EAFqC,EAErCA,MACAC,EAHqC,EAGrCA,SACAmB,EAJqC,EAIrCA,wBACAC,EALqC,EAKrCA,gBALqC,OAOrC,yBAAQT,UAAU,kBAAlB,UACE,wBACED,KAAK,SACLC,UAAWU,IAAW,sBAAuB,CAC3CC,OAAQF,IAEVG,QAASJ,EACTK,aAAW,yBAGb,cAAC,EAAD,CAAU1B,SAAUA,EAAUC,MAAOA,EAAOC,SAAUA,QCZ7CyB,EAA4B,SAAC,GAKnC,IAJLC,EAII,EAJJA,KACAC,EAGI,EAHJA,eACAC,EAEI,EAFJA,SACAC,EACI,EADJA,iBAEQC,EAAyBJ,EAAzBI,GAAIC,EAAqBL,EAArBK,MAAOC,EAAcN,EAAdM,UAEnB,EAAkC/B,oBAAS,GAA3C,mBAAOgC,EAAP,KAAkBC,EAAlB,KACA,EAA0CjC,oBAAS,GAAnD,mBAAOkC,EAAP,KAAsBC,EAAtB,KACA,EAAgCnC,mBAASyB,EAAKK,OAA9C,mBAAOM,EAAP,KAAiBC,EAAjB,KAEMC,EAAiBC,iBAAyB,MAEhDC,qBAAU,WACRP,EAAaP,EAAee,SAASZ,MACpC,CAACH,EAAgBG,IAEpBW,qBAAU,WACY,IAAD,EAAfN,IACF,UAAAI,EAAeI,eAAf,SAAwBC,WAEzB,CAACT,IAEJ,IA+BMU,EAAuBC,uBAAY,WACvCjB,EAAiBC,EAAI,CAAEE,WAAYA,MAClC,CAACF,EAAIE,EAAWH,IAMnB,OACE,sBAAKlB,UAAWU,IAAW,OAAQ,CAAEW,cAArC,UACE,uBAAOe,QAAQ,gBAAgBpC,UAAU,qBAAzC,SACE,uBACED,KAAK,WACLoB,GAAG,gBACHnB,UAAU,eACVqC,QAAShB,EACTT,QAASsB,MAIZV,EACC,sBAAM1B,SArCc,SAACJ,GACzBA,EAAME,iBACNsB,EAAiBH,EAAKI,GAAI,CAAEC,MAAOM,IACnCD,GAAiB,IAkCb,SACE,uBACE1B,KAAK,OACLC,UAAU,oBACVC,YAAY,6BACZC,MAAOwB,EACPvB,SArDgB,SAACT,GACzBiC,EAAYjC,EAAMU,OAAOF,QAqDjBoC,OAtCW,WACK,KAApBZ,EAAS7B,OACXoB,EAASF,EAAKI,IAEdD,EAAiBH,EAAKI,GAAI,CAAEC,MAAOM,IAGrCD,GAAiB,IAgCTc,QAnDU,SAAC7C,GACD,WAAdA,EAAM8C,KACRf,GAAiB,IAkDXgB,IAAKb,MAIT,qCACE,sBACE5B,UAAU,cACV0C,cApEgB,WACxBjB,GAAiB,GACjBE,EAAYP,EAAMvB,SAgEZ,SAIGuB,IAGH,wBACErB,KAAK,SACLC,UAAU,eACVY,QAzCW,WACnBK,EAASE,IAyCDd,SAAUiB,EAJZ,kBASA,sBAAKtB,UAAWU,IAAW,gBAAiB,CAC1C,YAAaM,EAAee,SAASZ,KADvC,UAIE,qBAAKnB,UAAU,8CACf,qBAAKA,UAAU,qBCpHd2C,EAA4B,SAAC,GAAD,IACvCC,EADuC,EACvCA,MACA3B,EAFuC,EAEvCA,SACAD,EAHuC,EAGvCA,eACA3B,EAJuC,EAIvCA,SACA6B,EALuC,EAKvCA,iBALuC,OAQvC,0BAASlB,UAAU,gBAAnB,UACG4C,EAAMC,KAAI,SAAA9B,GAAI,OACb,cAAC,EAAD,CAEEA,KAAMA,EACNC,eAAgBA,EAChBC,SAAUA,EACVC,iBAAkBA,GAJbH,EAAKI,OAQb9B,GACC,cAAC,EAAD,CACE0B,KAAM1B,EACN2B,eAAgBA,EAChBC,SAAUA,EACVC,iBAAkBA,QC/Bb4B,EAAqC,SAAC,GAG5C,IAFLC,EAEI,EAFJA,MACAC,EACI,EADJA,iBAEA,OACE,sBAAKhD,UAAWU,IACd,yDACA,CAAEuC,QAASF,IAFb,UAKE,wBACEhD,KAAK,SACLC,UAAU,SACVY,QAASoC,EACTnC,aAAW,gBAEZkC,MCfMG,EAA0B,SAAC,GAGjC,IAFLC,EAEI,EAFJA,OACAC,EACI,EADJA,UAEA,OACE,sBAAKpD,UAAU,SAAf,UACE,mBACEqD,KAAK,KACLrD,UAAWU,IAAW,eAAgB,CACpC4C,SAAUH,IAAW9F,EAAgBkG,MAEvC3C,QAAS,kBAAMwC,EAAU/F,EAAgBkG,MAL3C,iBAUA,mBACEF,KAAK,WACLrD,UAAWU,IAAW,eAAgB,CACpC4C,SAAUH,IAAW9F,EAAgBsD,SAEvCC,QAAS,kBAAMwC,EAAU/F,EAAgBsD,SAL3C,oBAUA,mBACE0C,KAAK,cACLrD,UAAWU,IAAW,eAAgB,CACpC4C,SAAUH,IAAW9F,EAAgBgE,YAEvCT,QAAS,kBAAMwC,EAAU/F,EAAgBgE,YAL3C,2BCrBOmC,EAA0B,SAAC,GAMjC,IALLL,EAKI,EALJA,OACAC,EAII,EAJJA,UACAK,EAGI,EAHJA,YACAC,EAEI,EAFJA,eACAC,EACI,EADJA,0BAEA,OACE,yBAAQ3D,UAAU,kBAAlB,UACE,sBAAMA,UAAU,aAAhB,mBACMyD,EAAYG,OADlB,iBAIA,cAAC,EAAD,CAAQT,OAAQA,EAAQC,UAAWA,IAElCM,EAAeE,OAAS,GACvB,wBACE7D,KAAK,SACLC,UAAWU,IAAW,2BAA4B,CAChDuC,OAAkC,IAA1BS,EAAeE,SAEzBhD,QAAS+C,EALX,iCCVFE,EAAU,MAEHC,EAAgB,WAC3B,MAA0BxE,mBAAiB,IAA3C,mBAAOsD,EAAP,KAAcmB,EAAd,KACA,EAA4BzE,mBAA0BjC,EAAgBkG,KAAtE,mBAAOJ,EAAP,KAAeC,EAAf,KACA,EAA0B9D,mBAAwB,MAAlD,mBAAOyD,EAAP,KAAc5D,EAAd,KACA,EAAgCG,mBAAsB,MAAtD,mBAAOD,EAAP,KAAiB2E,EAAjB,KACA,EAA4C1E,mBAAmB,IAA/D,mBAAO0B,EAAP,KAAuBiD,EAAvB,KAEAnC,qBAAU,WR1BY,IAACoC,KQ2BZL,ER1BJhF,EAAA,wBAAoCqF,KQ2BtC7F,KAAK0F,GACLI,OAAM,kBAAMhF,EAAS,4BACvB,IAEH2C,qBAAU,WACRnE,YAAW,WACTwB,EAAS,QACR,OACF,CAAC4D,IAEJ,IAAMU,EAAcb,EAAMO,QAAO,SAAApC,GAAI,OAAKA,EAAKM,aACzCqC,EAAiBd,EAAMO,QAAO,SAAApC,GAAI,OAAIA,EAAKM,aAC3CZ,EAAkBmC,EAAMwB,OAAM,SAAArD,GAAI,OAAIA,EAAKM,aAM3CgD,EAAgBlC,sBAAW,uCAAC,WAAOf,GAAP,iBAAAzB,EAAA,sEAExB2E,EAAU,CACdlD,QACA8C,OAAQL,EACRxC,WAAW,GAGE,EAEf2C,EAAY,aACV7C,GAHa,GAIVmD,IAGLL,EAAkB,CAPH,IARe,SRrC3BpF,EAAkB,SQqDWyF,GAhBF,OAgBxBC,EAhBwB,OAkB9BR,GAAS,SAAAS,GAAQ,4BAAQA,GAAR,CAAkBD,OAlBL,kDAoB9BpF,EAAS,wBApBqB,yBAsB9B6E,EAAY,MACZC,EAAkB,IAvBY,6EAAD,sDAyB9B,IAEGQ,EAAgB,uCAAG,WAAO1F,GAAP,SAAAY,EAAA,sEAErBsE,GAAkB,SAAAS,GAAkB,4BAAQA,GAAR,CAA4B3F,OAF3C,SAGfD,EAAWC,GAHI,OAIrBgF,GAAS,SAAAY,GAAW,OAAIA,EACrBxB,QAAO,SAAAyB,GAAU,OAAIA,EAAWzD,KAAOpC,QALrB,gDAOrBI,EAAS,2BAPY,yBASrB6E,EAAY,MACZC,EAAkB,IAVG,4EAAH,sDAchBN,EAAyB,uCAAG,4BAAAhE,EAAA,6DAC1BkF,EAAenB,EAAeb,KAAI,SAAA9B,GAAI,OAAI0D,EAAiB1D,EAAKI,OADtC,kBAIxB1D,QAAQ8F,IAAIsB,GAJY,sDAM9B1F,EAAS,mCANqB,wDAAH,qDAUzB+B,EAAmBiB,sBAAW,uCAClC,WACEpD,EACA+F,GAFF,eAAAnF,EAAA,sEAKIsE,GAAkB,SAAAc,GAAO,4BAAQA,GAAR,CAAiBhG,OAL9C,SAM8BC,EAAWD,EAAQ+F,GANjD,OAMUE,EANV,OAQIjB,GAAS,SAAAkB,GAAS,OAAIA,EAAUpC,KAAI,SAAA9B,GAClC,OAAIA,EAAKI,KAAOpC,EACPgC,EAGFiE,QAbb,gDAgBI7F,EAAS,2BAhBb,yBAkBI8E,EAAkB,IAlBtB,4EADkC,wDAsBlC,CAACrB,IAGGpC,EAAuB,uCAAG,4BAAAb,EAAA,6DACxBuF,EAAetC,EAAMC,KAAI,SAAA9B,GAAI,kCAC9BA,GAD8B,IAEjCM,WAAYZ,OAGdsD,EAASmB,GANqB,kBAStBzH,QAAQ8F,IACZ2B,EAAarC,KAAI,SAAA9B,GAAI,OACnBG,EAAiBH,EAAKI,GAAI,CAAEE,WAAYZ,QAXhB,uDAc5BtB,EAAS,0BAdmB,yDAAH,qDAkBvBgG,EAAeC,mBAAQ,WAC3B,OAAQjC,GACN,KAAK9F,EAAgBsD,OACnB,OAAO8C,EAET,KAAKpG,EAAgBgE,UACnB,OAAOqC,EAET,QACE,OAAOd,KAEV,CAACO,EAAQP,IAMZ,OACE,sBAAK5C,UAAU,UAAf,UACE,oBAAIA,UAAU,iBAAd,mBAEA,sBAAKA,UAAU,mBAAf,UACE,cAAC,EAAD,CACEb,SAAUA,EACVC,MAAOiF,EACPhF,SAAUA,EACVmB,wBAAyBA,EACzBC,gBAAiBA,IAEnB,cAAC,EAAD,CACEmC,MAAOuC,EACPlE,SAAUwD,EACVzD,eAAgBA,EAChB3B,SAAUA,EACV6B,iBAAkBA,IAGpB,cAAC,EAAD,CACEiC,OAAQA,EACRC,UAAWA,EACXK,YAAaA,EACbC,eAAgBA,EAChBC,0BAA2BA,OAG/B,cAAC,EAAD,CACEZ,MAAOA,EACPC,iBAjJmB,WACvB7D,EAAS,aCtCbkG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.32aca67c.chunk.js","sourcesContent":["export enum FilteringOption {\n  all = 'All',\n  active = 'Active',\n  completed = 'Completed',\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// returns a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // we wait for testing purpose to see loaders\n  return wait(300)\n    .then(() => fetch(`${BASE_URL}${url}`, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Todo } from '../types/Todo';\nimport { client } from '../utils/fetchClient';\n\nexport const getTodos = (userId: number) => {\n  return client.get<Todo[]>(`/todos?userId=${userId}`);\n};\n\nexport const deleteTodo = (todoId: number) => {\n  return client.delete(`/todos/${todoId}`);\n};\n\nexport const addTodo = (todo: Omit<Todo, 'id'>) => {\n  return client.post<Todo>('/todos', todo);\n};\n\nexport const updateTodo = (\n  todoId: number,\n  values: Partial<Pick<Todo, 'title' | 'completed'>>,\n) => {\n  return client.patch<Todo>(`/todos/${todoId}`, values);\n};\n","import React, { useState } from 'react';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  setError: (error: string) => void;\n  onAdd: (title: string) => void;\n  tempTodo: Todo | null;\n}\n\nexport const TodoForm: React.FC<Props> = ({\n  setError,\n  onAdd,\n  tempTodo,\n}) => {\n  const [newTodoTitle, setNewTodoTitle] = useState('');\n\n  const handleFormSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!newTodoTitle.trim()) {\n      setError('Title can\\'t be empty');\n\n      return;\n    }\n\n    await onAdd(newTodoTitle);\n    setNewTodoTitle('');\n  };\n\n  return (\n    <form onSubmit={handleFormSubmit}>\n      <input\n        type=\"text\"\n        className=\"todoapp__new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={newTodoTitle}\n        onChange={(event) => setNewTodoTitle(event.target.value)}\n        disabled={Boolean(tempTodo)}\n      />\n    </form>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { TodoForm } from '../TodoForm';\n\ninterface Props {\n  setError: (error: string) => void;\n  onAdd: (title: string) => void;\n  tempTodo: Todo | null;\n  toggleAllCompletedTodos: (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => void;\n  areAllCompleted: boolean;\n}\n\nexport const Header: React.FC<Props> = ({\n  setError,\n  onAdd,\n  tempTodo,\n  toggleAllCompletedTodos,\n  areAllCompleted,\n}) => (\n  <header className=\"todoapp__header\">\n    <button\n      type=\"button\"\n      className={classNames('todoapp__toggle-all', {\n        active: areAllCompleted,\n      })}\n      onClick={toggleAllCompletedTodos}\n      aria-label=\"Toggle All Completed\"\n    />\n\n    <TodoForm setError={setError} onAdd={onAdd} tempTodo={tempTodo} />\n  </header>\n);\n","import React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { Todo, UpdateTodoArgs } from '../../types/Todo';\n\ninterface Props {\n  todo: Todo;\n  loadingTodoIds: number[];\n  onDelete: CallableFunction;\n  handleUpdateTodo: (\n    todoId: number,\n    newTodoData: UpdateTodoArgs,\n    newTitle?: string,\n  ) => void;\n}\n\nexport const TodoItem: React.FC<Props> = ({\n  todo,\n  loadingTodoIds,\n  onDelete,\n  handleUpdateTodo,\n}) => {\n  const { id, title, completed } = todo;\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTitleEdited, setIsTitleEdited] = useState(false);\n  const [newTitle, setNewTitle] = useState(todo.title);\n\n  const inputReference = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    setIsLoading(loadingTodoIds.includes(id));\n  }, [loadingTodoIds, id]);\n\n  useEffect(() => {\n    if (isTitleEdited) {\n      inputReference.current?.focus();\n    }\n  }, [isTitleEdited]);\n\n  const handleDoubleClick = () => {\n    setIsTitleEdited(true);\n    setNewTitle(title.trim());\n  };\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewTitle(event.target.value);\n  };\n\n  const handleKeyUp = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Escape') {\n      setIsTitleEdited(false);\n    }\n  };\n\n  const handleTodoEditing = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    handleUpdateTodo(todo.id, { title: newTitle });\n    setIsTitleEdited(false);\n  };\n\n  const handleOnBlur = () => {\n    if (newTitle.trim() === '') {\n      onDelete(todo.id);\n    } else {\n      handleUpdateTodo(todo.id, { title: newTitle });\n    }\n\n    setIsTitleEdited(false);\n  };\n\n  const handleToggleComplete = useCallback(() => {\n    handleUpdateTodo(id, { completed: !completed });\n  }, [id, completed, handleUpdateTodo]);\n\n  const handleDelete = () => {\n    onDelete(id);\n  };\n\n  return (\n    <div className={classNames('todo', { completed })}>\n      <label htmlFor=\"todo-checkbox\" className=\"todo__status-label\">\n        <input\n          type=\"checkbox\"\n          id=\"todo-checkbox\"\n          className=\"todo__status\"\n          checked={completed}\n          onClick={handleToggleComplete}\n        />\n      </label>\n\n      {isTitleEdited ? (\n        <form onSubmit={handleTodoEditing}>\n          <input\n            type=\"text\"\n            className=\"todo__title-field\"\n            placeholder=\"Empty todo will be deleted\"\n            value={newTitle}\n            onChange={handleTitleChange}\n            onBlur={handleOnBlur}\n            onKeyUp={handleKeyUp}\n            ref={inputReference}\n          />\n        </form>\n      ) : (\n        <>\n          <span\n            className=\"todo__title\"\n            onDoubleClick={handleDoubleClick}\n          >\n            {title}\n          </span>\n\n          <button\n            type=\"button\"\n            className=\"todo__remove\"\n            onClick={handleDelete}\n            disabled={isLoading}\n          >\n            ×\n          </button>\n\n          <div className={classNames('modal overlay', {\n            'is-active': loadingTodoIds.includes(id),\n          })}\n          >\n            <div className=\"modal-background has-background-white-ter\" />\n            <div className=\"loader\" />\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { TodoItem } from '../TodoItem/TodoItem';\nimport { Todo, UpdateTodoArgs } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[];\n  onDelete: CallableFunction;\n  loadingTodoIds: number[];\n  tempTodo: Todo | null,\n  handleUpdateTodo: (\n    todoId: number,\n    newTodoData: UpdateTodoArgs,\n  ) => void;\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onDelete,\n  loadingTodoIds,\n  tempTodo,\n  handleUpdateTodo,\n}) => (\n\n  <section className=\"todoapp__main\">\n    {todos.map(todo => (\n      <TodoItem\n        key={todo.id}\n        todo={todo}\n        loadingTodoIds={loadingTodoIds}\n        onDelete={onDelete}\n        handleUpdateTodo={handleUpdateTodo}\n      />\n    ))}\n\n    {tempTodo && (\n      <TodoItem\n        todo={tempTodo}\n        loadingTodoIds={loadingTodoIds}\n        onDelete={onDelete}\n        handleUpdateTodo={handleUpdateTodo}\n      />\n    )}\n  </section>\n);\n","import React from 'react';\nimport classNames from 'classnames';\n\ninterface Props {\n  error: string | null;\n  handleCloseError: () => void;\n}\n\nexport const NotificationError: React.FC<Props> = ({\n  error,\n  handleCloseError,\n}) => {\n  return (\n    <div className={classNames(\n      'notification is-danger is-light has-text-weight-normal',\n      { hidden: !error },\n    )}\n    >\n      <button\n        type=\"button\"\n        className=\"delete\"\n        onClick={handleCloseError}\n        aria-label=\"Close Error\"\n      />\n      {error}\n    </div>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { FilteringOption } from '../../types/FilteringOption';\n\ninterface Props {\n  filter: FilteringOption;\n  setFilter: (filter: FilteringOption) => void;\n}\n\nexport const Filter: React.FC<Props> = ({\n  filter,\n  setFilter,\n}) => {\n  return (\n    <nav className=\"filter\">\n      <a\n        href=\"#/\"\n        className={classNames('filter__link', {\n          selected: filter === FilteringOption.all,\n        })}\n        onClick={() => setFilter(FilteringOption.all)}\n      >\n        All\n      </a>\n\n      <a\n        href=\"#/active\"\n        className={classNames('filter__link', {\n          selected: filter === FilteringOption.active,\n        })}\n        onClick={() => setFilter(FilteringOption.active)}\n      >\n        Active\n      </a>\n\n      <a\n        href=\"#/completed\"\n        className={classNames('filter__link', {\n          selected: filter === FilteringOption.completed,\n        })}\n        onClick={() => setFilter(FilteringOption.completed)}\n      >\n        Completed\n      </a>\n    </nav>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Filter } from '../Filter';\nimport { Todo } from '../../types/Todo';\nimport { FilteringOption } from '../../types/FilteringOption';\n\ninterface Props {\n  filter: FilteringOption;\n  setFilter: (filter: FilteringOption) => void;\n  activeTodos: Todo[];\n  completedTodos: Todo[];\n  handleClearCompletedTodos: () => Promise<void>;\n}\n\nexport const Footer: React.FC<Props> = ({\n  filter,\n  setFilter,\n  activeTodos,\n  completedTodos,\n  handleClearCompletedTodos,\n}) => {\n  return (\n    <footer className=\"todoapp__footer\">\n      <span className=\"todo-count\">\n        {`${activeTodos.length} items left`}\n      </span>\n\n      <Filter filter={filter} setFilter={setFilter} />\n\n      {completedTodos.length > 0 && (\n        <button\n          type=\"button\"\n          className={classNames('todoapp__clear-completed', {\n            hidden: completedTodos.length === 0,\n          })}\n          onClick={handleClearCompletedTodos}\n        >\n          Clear completed\n        </button>\n      )}\n    </footer>\n  );\n};\n","import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { Todo, UpdateTodoArgs } from './types/Todo';\nimport { FilteringOption } from './types/FilteringOption';\nimport { UserWarning } from './UserWarning';\nimport {\n  addTodo,\n  deleteTodo,\n  getTodos,\n  updateTodo,\n} from './api/todos';\nimport { Header } from './components/Header';\nimport { TodoList } from './components/TodoList';\nimport { NotificationError } from './components/Notifications';\nimport { Footer } from './components/Footer/Footer';\n\nconst USER_ID = 10921;\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [filter, setFilter] = useState<FilteringOption>(FilteringOption.all);\n  const [error, setError] = useState<string | null>(null);\n  const [tempTodo, setTempTodo] = useState<Todo | null>(null);\n  const [loadingTodoIds, setLoadingTodoIds] = useState<number[]>([]);\n\n  useEffect(() => {\n    getTodos(USER_ID)\n      .then(setTodos)\n      .catch(() => setError('Unable to get todos'));\n  }, []);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setError(null);\n    }, 3000);\n  }, [error]);\n\n  const activeTodos = todos.filter(todo => !todo.completed);\n  const completedTodos = todos.filter(todo => todo.completed);\n  const areAllCompleted = todos.every(todo => todo.completed);\n\n  const handleCloseError = () => {\n    setError(null);\n  };\n\n  const handleAddTodo = useCallback(async (title: string) => {\n    try {\n      const newTodo = {\n        title,\n        userId: USER_ID,\n        completed: false,\n      };\n\n      const tempId = 0;\n\n      setTempTodo({\n        id: tempId,\n        ...newTodo,\n      });\n\n      setLoadingTodoIds([tempId]);\n      const addedTodo = await addTodo(newTodo);\n\n      setTodos(curTodos => [...curTodos, addedTodo]);\n    } catch {\n      setError('Unable to add a todo');\n    } finally {\n      setTempTodo(null);\n      setLoadingTodoIds([]);\n    }\n  }, []);\n\n  const handleDeleteTodo = async (todoId: number) => {\n    try {\n      setLoadingTodoIds(prevLoadingTodoIds => [...prevLoadingTodoIds, todoId]);\n      await deleteTodo(todoId);\n      setTodos(prevTodoIds => prevTodoIds\n        .filter(prevTodoId => prevTodoId.id !== todoId));\n    } catch {\n      setError('Unable to delete a todo');\n    } finally {\n      setTempTodo(null);\n      setLoadingTodoIds([]);\n    }\n  };\n\n  const handleClearCompletedTodos = async () => {\n    const deletedTodos = completedTodos.map(todo => handleDeleteTodo(todo.id));\n\n    try {\n      await Promise.all(deletedTodos);\n    } catch {\n      setError('Unable to clear completed todos');\n    }\n  };\n\n  const handleUpdateTodo = useCallback(\n    async (\n      todoId: number,\n      newTodoData: UpdateTodoArgs,\n    ) => {\n      try {\n        setLoadingTodoIds(prevIds => [...prevIds, todoId]);\n        const updatedTodo = await updateTodo(todoId, newTodoData);\n\n        setTodos(prevTodos => prevTodos.map(todo => {\n          if (todo.id !== todoId) {\n            return todo;\n          }\n\n          return updatedTodo;\n        }));\n      } catch {\n        setError('Unable to update a todo');\n      } finally {\n        setLoadingTodoIds([]);\n      }\n    },\n    [todos],\n  );\n\n  const toggleAllCompletedTodos = async () => {\n    const updatedTodos = todos.map(todo => ({\n      ...todo,\n      completed: !areAllCompleted,\n    }));\n\n    setTodos(updatedTodos);\n\n    try {\n      await Promise.all(\n        updatedTodos.map(todo => (\n          handleUpdateTodo(todo.id, { completed: !areAllCompleted }))),\n      );\n    } catch {\n      setError('Unable to update todos');\n    }\n  };\n\n  const visibleTodos = useMemo(() => {\n    switch (filter) {\n      case FilteringOption.active:\n        return activeTodos;\n\n      case FilteringOption.completed:\n        return completedTodos;\n\n      default:\n        return todos;\n    }\n  }, [filter, todos]);\n\n  if (!USER_ID) {\n    return <UserWarning />;\n  }\n\n  return (\n    <div className=\"todoapp\">\n      <h1 className=\"todoapp__title\">todos</h1>\n\n      <div className=\"todoapp__content\">\n        <Header\n          setError={setError}\n          onAdd={handleAddTodo}\n          tempTodo={tempTodo}\n          toggleAllCompletedTodos={toggleAllCompletedTodos}\n          areAllCompleted={areAllCompleted}\n        />\n        <TodoList\n          todos={visibleTodos}\n          onDelete={handleDeleteTodo}\n          loadingTodoIds={loadingTodoIds}\n          tempTodo={tempTodo}\n          handleUpdateTodo={handleUpdateTodo}\n        />\n\n        <Footer\n          filter={filter}\n          setFilter={setFilter}\n          activeTodos={activeTodos}\n          completedTodos={completedTodos}\n          handleClearCompletedTodos={handleClearCompletedTodos}\n        />\n      </div>\n      <NotificationError\n        error={error}\n        handleCloseError={handleCloseError}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './styles/index.scss';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}